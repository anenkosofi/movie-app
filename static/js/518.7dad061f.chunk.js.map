{"version":3,"file":"static/js/518.7dad061f.chunk.js","mappings":"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","sources":["components/MovieCategoryList/MovieCategoryList.styled.js","components/MovieCategoryList/MovieCategoryList.js","components/Cast/Cast.styled.js","components/Cast/Cast.js","components/Trailer/Trailer.styled.js","components/Trailer/Trailer.js","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.js","services/tmdbApi.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst List = styled.div`\n  .swiper {\n    height: 216px;\n\n    @media screen and (min-width: 768px) {\n      height: 232px;\n    }\n  }\n`;\n\nconst ListItem = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Item = styled(NavLink)`\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover:not(.active),\n  &:focus-visible:not(.active) {\n    color: #ec9706;\n  }\n`;\n\nconst Poster = styled.img`\n  object-fit: cover;\n`;\n\nconst MovieInfo = styled.div`\n  padding: 12px 4px;\n\n  text-align: center;\n`;\n\nexport { List, ListItem, Item, Poster, MovieInfo };\n","import { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/css';\nimport {\n  List,\n  ListItem,\n  Item,\n  Poster,\n  MovieInfo,\n} from './MovieCategoryList.styled';\nimport defaultPicture from '../../images/placeholder-home.jpg';\n\nexport const MovieCategoryList = ({ items, type }) => {\n  return (\n    <List>\n      <Swiper spaceBetween={12} slidesPerView={'auto'}>\n        {items.map(({ id, backdrop_path, title, name }) => (\n          <SwiperSlide key={id} style={{ width: '280px' }}>\n            <ListItem>\n              <Item to={`/${type}/${id}`}>\n                <Poster\n                  src={\n                    backdrop_path\n                      ? `https://image.tmdb.org/t/p/original${backdrop_path}`\n                      : defaultPicture\n                  }\n                  alt={title || name}\n                />\n                <MovieInfo>\n                  <p>{title || name}</p>\n                </MovieInfo>\n              </Item>\n            </ListItem>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nconst List = styled.div`\n  .swiper {\n    height: 216px;\n\n    @media screen and (min-width: 768px) {\n      height: 232px;\n    }\n  }\n`;\n\nconst ListItem = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  img {\n    width: 120px;\n    height: 180px;\n    object-fit: cover;\n\n    border-radius: 4px;\n  }\n\n  div {\n    padding: 8px;\n  }\n\n  p {\n    font-size: 12px;\n  }\n`;\n\nconst Character = styled.p`\n  margin-top: 4px;\n\n  color: #808080;\n`;\n\nexport { List, ListItem, Character };\n","import { useState, useEffect } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/css';\nimport { getMovieCast, getTVSeriesCast } from 'services/tmdbApi';\nimport { List, ListItem, Character } from './Cast.styled';\nimport defaultPicture from '../../images/placeholder-profile.jpg';\n\nexport const Cast = ({ id, type }) => {\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    switch (type) {\n      case 'movies':\n        getMovieCast(id).then(({ cast }) => setCast(cast));\n        break;\n\n      case 'tv':\n        getTVSeriesCast(id).then(({ cast }) => setCast(cast));\n        break;\n\n      default:\n        return;\n    }\n  }, [id, type]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <List>\n      <Swiper spaceBetween={12} slidesPerView={'auto'}>\n        {cast.map(({ id, character, name, profile_path }) => (\n          <SwiperSlide key={id} style={{ width: '120px' }}>\n            <ListItem>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : defaultPicture\n                }\n                alt={name}\n              />\n              <div>\n                <p>{name}</p>\n                <Character>{character}</Character>\n              </div>\n            </ListItem>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const TrailerWrapper = styled.div`\n  width: 280px;\n  height: 200px;\n  margin: 0 auto;\n\n  @media screen and (min-width: 480px) {\n    width: 320px;\n    height: 240px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 720px;\n    height: 405px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 848px;\n    height: 477px;\n  }\n\n  iframe {\n    width: 100%;\n    height: 100%;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { getMovieVideos, getTVSeriesVideos } from 'services/tmdbApi';\nimport { TrailerWrapper } from './Trailer.styled';\n\nexport const Trailer = ({ id, type }) => {\n  const [trailer, setTrailer] = useState(null);\n\n  useEffect(() => {\n    switch (type) {\n      case 'movies':\n        getMovieVideos(id).then(({ results }) => {\n          const trailerInfo = results.find(({ type }) => type === 'Trailer');\n          setTrailer(trailerInfo);\n        });\n        break;\n\n      case 'tv':\n        getTVSeriesVideos(id).then(({ results }) => {\n          const trailerInfo = results.find(({ type }) => type === 'Trailer');\n          setTrailer(trailerInfo);\n        });\n        break;\n\n      default:\n        return;\n    }\n  }, [id, type]);\n\n  if (!trailer) {\n    return;\n  }\n  const { name, key } = trailer;\n  return (\n    <TrailerWrapper>\n      <iframe\n        width=\"640\"\n        height=\"360\"\n        src={`https://www.youtube.com/embed/${key}`}\n        title={name}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </TrailerWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nconst Details = styled.section`\n  position: relative;\n  padding: 68px 0;\n  height: 100vh;\n  background-position: top;\n  background-size: cover;\n  background-repeat: no-repeat;\n\n  @media screen and (min-width: 768px) {\n    padding: 164px 0;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n\n    background-image: linear-gradient(\n      to top,\n      rgb(33, 33, 33, 1),\n      rgb(33, 33, 33, 0.6)\n    );\n  }\n`;\n\nconst Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 1280px;\n  }\n`;\n\nconst MovieContent = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n\n  padding: 16px 0;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    gap: 24px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    gap: 36px;\n  }\n`;\n\nconst Poster = styled.img`\n  width: 300px;\n  object-fit: cover;\n\n  border-radius: 4px;\n\n  @media screen and (min-width: 768px) {\n    width: 268px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 320px;\n  }\n`;\n\nconst MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 24px;\n\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    align-items: flex-start;\n    text-align: left;\n  }\n\n  p {\n    font-size: 16px;\n\n    @media screen and (min-width: 1280px) {\n      font-size: 20px;\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 36px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 42px;\n  }\n  @media screen and (min-width: 1280px) {\n    font-size: 64px;\n  }\n`;\n\nconst Genres = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  column-gap: 12px;\n  row-gap: 8px;\n\n  span {\n    padding: 4px 8px;\n    font-size: 12px;\n    background-color: #212121;\n\n    border: 1px solid #ffffff;\n    border-radius: 30px;\n\n    @media screen and (min-width: 768px) {\n    }\n    @media screen and (min-width: 1280px) {\n      padding: 8px 24px;\n      font-size: 16px;\n\n      border-width: 2px;\n    }\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n\n  @media screen and (min-width: 1280px) {\n    gap: 36px;\n  }\n\n  button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    width: 134px;\n    height: 44px;\n\n    font-size: 16px;\n\n    color: #1e1e1e;\n    background-color: rgba(191, 191, 191, 0.5);\n\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    outline: none;\n\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n      color: #212121;\n      background-color: #fce205;\n      box-shadow: 0px 8px 12px -4px rgba(236, 151, 6, 0.32);\n    }\n\n    @media screen and (min-width: 768px) {\n      width: 180px;\n      height: 50px;\n    }\n\n    @media screen and (min-width: 1280px) {\n      width: 210px;\n\n      font-size: 20px;\n    }\n  }\n`;\n\nconst AdditionalMovieContent = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  padding: 16px 0;\n\n  font-size: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport {\n  Details,\n  Container,\n  MovieContent,\n  Poster,\n  MovieInfo,\n  Title,\n  Genres,\n  ButtonWrapper,\n  AdditionalMovieContent,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  MdOutlinePlaylistAdd,\n  MdOutlinePlaylistAddCheck,\n} from 'react-icons/md';\nimport {\n  getMovieById,\n  getTVSeriesById,\n  getSimilarMovies,\n  getSimilarTVSeries,\n} from 'services/tmdbApi';\nimport { MovieCategoryList } from 'components/MovieCategoryList';\nimport { Cast } from 'components/Cast';\nimport { Trailer } from 'components/Trailer';\nimport {\n  Details,\n  Container,\n  MovieContent,\n  Poster,\n  MovieInfo,\n  Title,\n  Genres,\n  ButtonWrapper,\n  AdditionalMovieContent,\n} from './MovieDetails.styled';\nimport defaultPicture from '../../images/placeholder.jpg';\n\nconst MovieDetails = ({ type, category }) => {\n  const [movie, setMovie] = useState(null);\n  const [similarMovies, setSimilarMovies] = useState([]);\n  const [watchList, setWatchList] = useState(() => {\n    return JSON.parse(localStorage.getItem('watchList')) ?? [];\n  });\n  const [watched, setWatched] = useState(() => {\n    return JSON.parse(localStorage.getItem('watched')) ?? [];\n  });\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    switch (type) {\n      case 'movies':\n        getMovieById(movieId).then(setMovie);\n        break;\n\n      case 'tv':\n        getTVSeriesById(movieId).then(setMovie);\n        break;\n\n      case 'library':\n        if (category === 'movies') {\n          getMovieById(movieId).then(setMovie);\n        } else if (category === 'tv') {\n          getTVSeriesById(movieId).then(setMovie);\n        }\n        break;\n\n      default:\n        return;\n    }\n  }, [movieId, type, category]);\n\n  useEffect(() => {\n    switch (type) {\n      case 'movies':\n        getSimilarMovies(movieId).then(({ results }) =>\n          setSimilarMovies(results)\n        );\n        break;\n\n      case 'tv':\n        getSimilarTVSeries(movieId).then(({ results }) =>\n          setSimilarMovies(results)\n        );\n        break;\n\n      default:\n        return;\n    }\n  }, [movieId, type]);\n\n  useEffect(() => {\n    localStorage.setItem('watchList', JSON.stringify(watchList));\n  }, [watchList]);\n\n  useEffect(() => {\n    localStorage.setItem('watched', JSON.stringify(watched));\n  }, [watched]);\n\n  const setMovieToLocalStorage = ({ name, id, type }) => {\n    switch (name) {\n      case 'watchList':\n        if (watchList.find(({ id: movieId }) => movieId === id)) {\n          setWatchList(prevState =>\n            prevState.filter(({ id: movieId }) => movieId !== id)\n          );\n          return;\n        }\n        if (type === 'movies') {\n          getMovieById(id).then(movie =>\n            setWatchList(prevState => [...prevState, movie])\n          );\n        } else if (type === 'tv') {\n          getTVSeriesById(id).then(movie =>\n            setWatchList(prevState => [...prevState, movie])\n          );\n        }\n        break;\n\n      case 'watched':\n        if ([...watched].find(({ id: movieId }) => movieId === id)) {\n          setWatched(prevState =>\n            prevState.filter(({ id: movieId }) => movieId !== id)\n          );\n          return;\n        }\n        if (type === 'movies') {\n          getMovieById(id).then(movie =>\n            setWatched(prevState => [...prevState, movie])\n          );\n        } else if (type === 'tv') {\n          getTVSeriesById(id).then(movie =>\n            setWatched(prevState => [...prevState, movie])\n          );\n        }\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  if (!movie) {\n    return;\n  }\n  const { id, backdrop_path, genres, overview, poster_path, name, title } =\n    movie;\n\n  return (\n    <Details\n      style={{\n        backgroundImage: backdrop_path\n          ? `url(https://image.tmdb.org/t/p/original${backdrop_path})`\n          : defaultPicture,\n      }}\n    >\n      <Container>\n        <MovieContent>\n          <Poster\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/original${poster_path}`\n                : defaultPicture\n            }\n            alt={title}\n          ></Poster>\n          <MovieInfo>\n            <Title>{title || name}</Title>\n            <Genres>\n              {genres.map(({ name }) => (\n                <span key={name}>{name}</span>\n              ))}\n            </Genres>\n            <p>{overview}</p>\n            <ButtonWrapper>\n              <button\n                type=\"button\"\n                onClick={() =>\n                  setMovieToLocalStorage({ name: 'watchList', id, type })\n                }\n              >\n                <MdOutlinePlaylistAdd size={24} />\n                <span>\n                  {[...watchList].find(({ id: movieId }) => movieId === id)\n                    ? 'Remove from queue'\n                    : 'Add to queue'}\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() =>\n                  setMovieToLocalStorage({ name: 'watched', id, type })\n                }\n              >\n                <MdOutlinePlaylistAddCheck size={24} />\n                <span>\n                  {[...watched].find(({ id: movieId }) => movieId === id)\n                    ? 'Remove from watched'\n                    : 'Add to watched'}\n                </span>\n              </button>\n            </ButtonWrapper>\n          </MovieInfo>\n        </MovieContent>\n        <AdditionalMovieContent>\n          <h2>Videos</h2>\n          <Trailer id={id} type={type} />\n        </AdditionalMovieContent>\n        <AdditionalMovieContent>\n          <h2>Cast</h2>\n          <Cast id={id} type={type} />\n        </AdditionalMovieContent>\n        <AdditionalMovieContent>\n          <h2>You might also like</h2>\n          <MovieCategoryList items={similarMovies} type={type} />\n        </AdditionalMovieContent>\n      </Container>\n    </Details>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bfcd7a06a5bb09fb5aafe756d2f60f73';\n\naxios.defaults.baseURL = `${BASE_URL}`;\n\nconst getTrendingMovies = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getMovieByQuery = async (query, page) => {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: { api_key: API_KEY, query, page },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getMovieById = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getMovieCast = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getTVSeriesCast = async id => {\n  try {\n    const response = await axios.get(`/tv/${id}/credits`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getTrendingTVSeries = async () => {\n  try {\n    const response = await axios.get('/trending/tv/day', {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getTVSeriesByQuery = async (query, page) => {\n  try {\n    const response = await axios.get('/search/tv', {\n      params: { api_key: API_KEY, query, page },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getTVSeriesById = async id => {\n  try {\n    const response = await axios.get(`/tv/${id}`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getPopularMovies = async () => {\n  try {\n    const response = await axios.get('/movie/popular', {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getTopRatedMovies = async () => {\n  try {\n    const response = await axios.get('/movie/top_rated', {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getPopularTVSeries = async () => {\n  try {\n    const response = await axios.get('/tv/popular', {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getTopRatedTVSeries = async () => {\n  try {\n    const response = await axios.get('/tv/top_rated', {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getSimilarMovies = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/similar`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getSimilarTVSeries = async id => {\n  try {\n    const response = await axios.get(`/tv/${id}/similar`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getMovieVideos = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/videos`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getTVSeriesVideos = async id => {\n  try {\n    const response = await axios.get(`/tv/${id}/videos`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getNowPlayingMovies = async () => {\n  try {\n    const response = await axios.get(`/movie/now_playing`, {\n      params: { api_key: API_KEY },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByQuery,\n  getMovieById,\n  getMovieCast,\n  getTVSeriesCast,\n  getTrendingTVSeries,\n  getTVSeriesByQuery,\n  getTVSeriesById,\n  getPopularMovies,\n  getTopRatedMovies,\n  getPopularTVSeries,\n  getTopRatedTVSeries,\n  getSimilarMovies,\n  getSimilarTVSeries,\n  getMovieVideos,\n  getTVSeriesVideos,\n  getNowPlayingMovies,\n};\n"],"names":["List","styled","ListItem","Item","NavLink","Poster","MovieInfo","MovieCategoryList","items","type","spaceBetween","slidesPerView","map","id","backdrop_path","title","name","style","width","to","src","defaultPicture","alt","Character","Cast","useState","cast","setCast","useEffect","getMovieCast","then","getTVSeriesCast","character","profile_path","TrailerWrapper","Trailer","trailer","setTrailer","getMovieVideos","trailerInfo","results","find","getTVSeriesVideos","key","height","frameBorder","allow","allowFullScreen","Details","Container","MovieContent","Title","Genres","ButtonWrapper","AdditionalMovieContent","category","movie","setMovie","similarMovies","setSimilarMovies","JSON","parse","localStorage","getItem","watchList","setWatchList","watched","setWatched","movieId","useParams","getMovieById","getTVSeriesById","getSimilarMovies","getSimilarTVSeries","setItem","stringify","setMovieToLocalStorage","prevState","filter","genres","overview","poster_path","backgroundImage","onClick","size","API_KEY","axios","getTrendingMovies","params","api_key","response","data","console","log","getMovieByQuery","query","page","getTrendingTVSeries","getTVSeriesByQuery","getPopularMovies","getTopRatedMovies","getPopularTVSeries","getTopRatedTVSeries","getNowPlayingMovies"],"sourceRoot":""}